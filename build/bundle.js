(()=>{"use strict";var t={235:(t,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.Canvas=void 0;var s=n(490),e=function(){function t(t){var i;if(this.environment=t,document.body.style.backgroundColor="black",!(this.canvas=document.getElementById("viewport")))throw new Error("Unable to create canvas");if(!(this.context=this.canvas.getContext("2d")))throw new Error("2d context not supported or canvas already initialized");var n=this;this.canvas.addEventListener("mousedown",(function(t){n.mouseClickEvent(t,n)})),window.addEventListener("resize",(function(t){})),null===(i=document.getElementById("compute"))||void 0===i||i.addEventListener("click",(function(t){(0,s.Compute)(n.environment)})),this.canvas.width=innerWidth,this.canvas.height=innerHeight,this.drawLine()}return t.prototype.getMousePosition=function(t){var i=this.canvas.getBoundingClientRect();return{x:t.clientX-i.left,y:t.clientY-i.top}},t.prototype.mouseClickEvent=function(t,i){for(var n=i.getMousePosition(t),s=(n.y,0);s<i.environment.rows;s++){var e=i.environment.spacing,r=i.environment.startY,o=i.environment.startX,a=i.environment.radius;if(n.y>r+s*e&&n.y<i.environment.startY+s*e+e)for(var h=0;h<i.environment.columns;h++)n.x>o-a+h*e&&n.x<i.environment.startX+a+h*e&&i.environment.circles[s][h].switchBit()}},t.prototype.drawLine=function(){this.context.beginPath();var t=this.environment.startY+this.environment.spacing/4+this.environment.rows*this.environment.spacing,i=this.environment.startX-this.environment.radius;this.context.moveTo(i,t),this.context.lineTo(i+this.environment.columns*this.environment.spacing,t),this.context.strokeStyle="white",this.context.stroke(),this.context.closePath()},t.prototype.drawButtons=function(){},t}();i.Canvas=e},50:(t,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.Circle=void 0;var n=function(){function t(t,i,n,s,e){this.x=t,this.y=i,this.set=null!=e&&e,this.radius=n,this.left=t-n,this.top=i-n,this.right=t+n,this.bottom=i+n,this.context=s,this.draw(this.context)}return t.prototype.switchBit=function(){this.set=!this.set,this.draw(this.context)},t.prototype.setBit=function(t){this.set=t,this.draw(this.context)},t.prototype.draw=function(t){t.clearRect(this.left-2,this.top-2,2*this.radius+4,2*this.radius+4),t.beginPath(),t.arc(this.x,this.y,this.radius,0,2*Math.PI),t.fillStyle=this.set?"white":"#0f0f0f",t.fill(),t.closePath()},t}();i.Circle=n},824:(t,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.Environment=void 0;var s=n(50),e=n(235);i.Environment=function(t,i){this.columns=null!=t?t:8,this.rows=null!=i?i:2;var n=innerWidth/2/this.columns-10;this.radius=n<10?10:n,this.spacing=2*this.radius+5,this.startX=innerWidth/2+this.radius-10-this.columns*this.spacing/2,this.startY=innerHeight/2-this.radius+10-(this.rows+1)*this.spacing/2,this.circles=new Array(this.rows),this.canvas=new e.Canvas(this),this.results=new Array(this.columns);for(var r=0;r<this.columns;r++)this.results[r]=new s.Circle(this.startX+r*this.spacing,this.startY+this.radius+this.spacing*this.rows+this.spacing/2,this.radius,this.canvas.context);for(var o=0;o<this.rows;o++)for(this.circles[o]=new Array(this.columns),r=0;r<this.columns;r++)this.circles[o][r]=new s.Circle(this.startX+r*this.spacing,this.startY+this.radius+this.spacing*o,this.radius,this.canvas.context)}},490:(t,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.Compute=void 0,i.Compute=function(t){for(var i=new Array(t.rows),n=0,s=0;s<t.rows;s++){i[s]=0;for(var e=t.columns-1;e>=0;e--)t.circles[s][e].set&&(i[s]+=Math.pow(2,t.columns-1-e));n+=i[s]}var r=function(t,i){var n=[0];i=null!=i?i:32;for(var s=0;s<i;s++){var e=t&1<<s;n[s]=0===e?0:1}return n}(n),o=0;for(e=t.columns-1;e>=0;e--)t.results[e].setBit(r[o]>0),o++}}},i={};new(function n(s){var e=i[s];if(void 0!==e)return e.exports;var r=i[s]={exports:{}};return t[s](r,r.exports,n),r.exports}(824).Environment)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,