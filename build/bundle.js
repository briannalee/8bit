(()=>{"use strict";var t={235:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Canvas=void 0;var i=n(490),s=function(){function t(t){var e,n;if(this.environment=t,document.body.style.backgroundColor="black",!(this.canvas=document.createElement("canvas")))throw new Error("Unable to create canvas");if(this.canvas.id="viewport",!(n=document.getElementById("container")))throw new Error("Unable to append canvas to container");if(n.append(this.canvas),!(this.context=this.canvas.getContext("2d")))throw new Error("2d context not supported or canvas already initialized");var s=this;this.canvas.addEventListener("mousedown",(function(t){s.mouseClickEvent(t,s)})),null===(e=document.getElementById("compute"))||void 0===e||e.addEventListener("click",(function(t){(0,i.Compute)(s.environment)})),this.canvas.width=innerWidth,this.canvas.height=innerHeight,this.drawLine()}return t.prototype.getMousePosition=function(t){var e=this.canvas.getBoundingClientRect();return{x:t.clientX-e.left,y:t.clientY-e.top}},t.prototype.mouseClickEvent=function(t,e){for(var n=e.getMousePosition(t),i=(n.y,0);i<e.environment.rows;i++){var s=e.environment.spacing,r=e.environment.startY,o=e.environment.startX,a=e.environment.radius;if(n.y>r+i*s&&n.y<e.environment.startY+i*s+s)for(var c=0;c<e.environment.columns;c++)n.x>o-a+c*s&&n.x<e.environment.startX+a+c*s&&e.environment.circles[i][c].switchBit()}},t.prototype.drawLine=function(){this.context.beginPath();var t=this.environment.startY+this.environment.spacing/4+this.environment.rows*this.environment.spacing,e=this.environment.startX-this.environment.radius;this.context.moveTo(e,t),this.context.lineTo(e+this.environment.columns*this.environment.spacing,t),this.context.strokeStyle="white",this.context.stroke(),this.context.closePath()},t.prototype.drawButtons=function(){},t}();e.Canvas=s},50:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Circle=void 0;var n=function(){function t(t,e,n,i,s){this.x=t,this.y=e,this.set=null!=s&&s,this.radius=n,this.left=t-n,this.top=e-n,this.right=t+n,this.bottom=e+n,this.context=i,this.draw(this.context)}return t.prototype.switchBit=function(){this.set=!this.set,this.draw(this.context)},t.prototype.setBit=function(t){this.set=t,this.draw(this.context)},t.prototype.draw=function(t){t.clearRect(this.left-2,this.top-2,2*this.radius+4,2*this.radius+4),t.beginPath(),t.arc(this.x,this.y,this.radius,0,2*Math.PI),t.fillStyle=this.set?"white":"#0f0f0f",t.fill(),t.closePath()},t}();e.Circle=n},911:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.debounce=void 0,e.debounce=function(t,e){var n=void 0;return function(){for(var i=[],s=0;s<arguments.length;s++)i[s]=arguments[s];return n||((n={}).promise=new Promise((function(t,e){n.resolve=t,n.reject=e}))),clearTimeout(n.timeout),n.latestArgs=i,n.timeout=setTimeout((function(){var e=n;n=void 0;try{e.resolve(t.apply(void 0,e.latestArgs))}catch(t){e.reject(t)}}),e),n.promise}}},824:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Environment=void 0;var i=n(50),s=n(235);e.Environment=function(t,e){this.columns=null!=t?t:8,this.rows=null!=e?e:2;var n=innerWidth/2/this.columns-10;this.radius=n<10?10:n,this.spacing=2*this.radius+5,this.startX=innerWidth/2+this.radius-10-this.columns*this.spacing/2,this.startY=innerHeight/2-this.radius+10-(this.rows+1)*this.spacing/2,this.circles=new Array(this.rows),this.canvas=new s.Canvas(this),this.results=new Array(this.columns);for(var r=0;r<this.columns;r++)this.results[r]=new i.Circle(this.startX+r*this.spacing,this.startY+this.radius+this.spacing*this.rows+this.spacing/2,this.radius,this.canvas.context);for(var o=0;o<this.rows;o++)for(this.circles[o]=new Array(this.columns),r=0;r<this.columns;r++)this.circles[o][r]=new i.Circle(this.startX+r*this.spacing,this.startY+this.radius+this.spacing*o,this.radius,this.canvas.context)}},490:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Compute=void 0,e.Compute=function(t){for(var e=new Array(t.rows),n=0,i=0;i<t.rows;i++){e[i]=0;for(var s=t.columns-1;s>=0;s--)t.circles[i][s].set&&(e[i]+=Math.pow(2,t.columns-1-s));n+=e[i]}var r=function(t,e){var n=[0];e=null!=e?e:32;for(var i=0;i<e;i++){var s=t&1<<i;n[i]=0===s?0:1}return n}(n),o=0;for(s=t.columns-1;s>=0;s--)t.results[s].setBit(r[o]>0),o++}}},e={};function n(i){var s=e[i];if(void 0!==s)return s.exports;var r=e[i]={exports:{}};return t[i](r,r.exports,n),r.exports}(()=>{var t=n(911),e=n(824),i=(0,t.debounce)((function(){null!=document.getElementById("viewport")&&(document.getElementById("viewport").remove(),s())}),200);function s(){new e.Environment}s(),window.addEventListener("resize",(function(t){i()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,