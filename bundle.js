(()=>{"use strict";var t={235:(t,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.Canvas=void 0;var n=function(){function t(t){if(this.environment=t,document.body.style.backgroundColor="black",!(this.canvas=document.createElement("CANVAS")))throw new Error("Unable to create canvas");if(document.body.appendChild(this.canvas),!(this.context=this.canvas.getContext("2d")))throw new Error("2d context not supported or canvas already initialized");var i=this;this.canvas.addEventListener("mousedown",(function(t){i.mouseClickEvent(t,i)})),this.canvas.width=innerWidth,this.canvas.height=innerHeight}return t.prototype.getMousePosition=function(t){var i=this.canvas.getBoundingClientRect();return{x:t.clientX-i.left,y:t.clientY-i.top}},t.prototype.mouseClickEvent=function(t,i){for(var n=i.getMousePosition(t),s=(n.y,0);s<i.environment.rows;s++){var e=i.environment.spacing,r=i.environment.startY,o=i.environment.startX,a=i.environment.radius;if(n.y>r+s*e&&n.y<i.environment.startY+s*e+e)for(var h=0;h<i.environment.columns;h++)n.x>o-a+h*e&&n.x<i.environment.startX+a+h*e&&(i.environment.circles[s][h].set=!i.environment.circles[s][h].set,i.environment.circles[s][h].draw(i.context))}},t}();i.Canvas=n},50:(t,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.Circle=void 0;var n=function(){function t(t,i,n,s,e){this.x=t,this.y=i,this.set=null!=e&&e,this.radius=n,this.left=t-n,this.top=i-n,this.right=t+n,this.bottom=i+n,this.draw(s)}return t.prototype.draw=function(t){t.clearRect(this.left,this.top,2*this.radius,2*this.radius),t.beginPath(),t.arc(this.x,this.y,this.radius,0,2*Math.PI),t.fillStyle=this.set?"white":"grey",t.fill(),t.closePath()},t}();i.Circle=n},824:(t,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.Environment=void 0;var s=n(50),e=n(235);i.Environment=function(t,i,n){this.columns=null!=t?t:8,this.rows=null!=i?i:2,this.padding=null!=n?n:5;var r=innerWidth/2/this.columns-2*this.padding;this.radius=r<10?10:r,this.spacing=2*this.radius+this.padding,this.startX=innerWidth/2+this.radius-2*this.padding-this.columns*this.spacing/2,this.startY=innerHeight/2-this.radius+2*this.padding-this.rows*this.spacing/2,this.circles=new Array(this.rows),this.canvas=new e.Canvas(this);for(var o=0;o<this.rows;o++){this.circles[o]=new Array(this.columns);for(var a=0;a<this.columns;a++)this.circles[o][a]=new s.Circle(this.startX+a*this.spacing,this.startY+(this.radius+this.spacing*o),this.radius,this.canvas.context)}}}},i={};new(function n(s){var e=i[s];if(void 0!==e)return e.exports;var r=i[s]={exports:{}};return t[s](r,r.exports,n),r.exports}(824).Environment)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,