(()=>{"use strict";var t={765:(t,i,e)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.BinaryNumber=void 0;var n=e(399),s=function(){function t(t,i,e){this.env=t,this.row=i,this.decimalValue=null!=e?e:0,this.binaryValue=this.decimalValue.toString(2);var n=2*Math.round(this.binaryValue.length/2);this.bits=n>this.env.columns?n:this.env.columns,this.VisualBits=new Array(this.bits),this.createVisualBits(),this.setDecimal(this.decimalValue)}return t.prototype.setCircleValues=function(){var t=!1,i=this.binaryValue;this.VisualBits.length<i.length&&(i=i.substring(i.length-this.VisualBits.length),i=this.setCharAt(i,0,"1"),t=!0);for(var e=this.VisualBits.length-1;e>=0;e--)this.VisualBits[e].setOverflow(t),this.VisualBits[e].setBit("1"==i.charAt(e))},t.prototype.createVisualBits=function(){for(var t=this.bits-1;t>=0;t--)this.VisualBits[t]=this.addVisualBit(t)},t.prototype.addVisualBit=function(t){return new n.VisualBit(this.env.startX+t*this.env.spacing,this.env.startY+this.env.radius+this.env.spacing*this.row,this.env.radius,this.env)},t.prototype.getDecimal=function(){return this.decimalValue},t.prototype.getBinary=function(){return this.binaryValue},t.prototype.setBit=function(t,i){i=null!=i?i:!this.VisualBits[t].set,this.binaryValue=this.setCharAt(this.binaryValue,t,i?"1":"0"),this.VisualBits[t].setBit(i),this.decimalValue=parseInt(this.binaryValue,2)},t.prototype.updateBinaryString=function(){this.binaryValue=this.decimalValue.toString(2),this.binaryValue.length<this.env.columns&&(this.binaryValue=this.binaryValue.padStart(this.env.columns,"0"))},t.prototype.setDecimal=function(t){this.decimalValue=t,this.updateBinaryString(),this.setCircleValues()},t.prototype.setCharAt=function(t,i,e){return i>t.length-1?t:t.substring(0,i)+e+t.substring(i+1)},t}();i.BinaryNumber=s},438:(t,i,e)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.CanvasStage=void 0;var n=e(607),s=e(251),r=function(){function t(t){var i,e;if(this.environment=t,document.body.style.backgroundColor="black",!(this.canvas=document.createElement("canvas")))throw new Error("Unable to create canvas");if(this.canvas.id="viewport",!(e=document.getElementById("container")))throw new Error("Unable to append canvas to container");if(e.append(this.canvas),!(this.context=this.canvas.getContext("2d")))throw new Error("2d context not supported or canvas already initialized");var r=this;this.canvas.addEventListener("mouseup",(function(t){r.mouseClickEvent(t)})),null===(i=document.getElementById("compute"))||void 0===i||i.addEventListener("click",(function(t){(0,s.Compute)(r.environment)}));var a=document.getElementById("bits");a&&a.addEventListener("input",(function(t){var i;(i=parseInt(a.value))&&(0,n.ChangeBitSize)(i)})),this.canvas.width=t.width,this.canvas.height=t.height,this.drawLine()}return t.prototype.getMousePosition=function(t){var i=this.canvas.getBoundingClientRect(),e=this.canvas.width/i.width,n=this.canvas.height/i.height;return{x:(t.clientX-i.left)*e,y:(t.clientY-i.top)*n}},t.prototype.mouseClickEvent=function(t){for(var i=this.getMousePosition(t),e=0;e<this.environment.rows;e++){var n=this.environment.spacing,s=this.environment.startY,r=this.environment.startX,a=this.environment.radius;if(i.y>s+e*n&&i.y<s+e*n+n)for(var o=0;o<this.environment.columns;o++)i.x>r+(o*n-a)&&i.x<r+(o*n+a)&&this.environment.BinaryNumbers[e].setBit(o)}},t.prototype.drawLine=function(){this.context.beginPath();var t=this.environment.startY+this.environment.spacing/4+this.environment.rows*this.environment.spacing,i=this.environment.startX-this.environment.radius;this.context.moveTo(i,t),this.context.lineTo(i+this.environment.columns*this.environment.spacing,t),this.context.strokeStyle="white",this.context.stroke(),this.context.closePath()},t.prototype.drawButtons=function(){},t}();i.CanvasStage=r},115:(t,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.debounce=void 0,i.debounce=function(t,i){var e=void 0;return function(){for(var n=[],s=0;s<arguments.length;s++)n[s]=arguments[s];return e||((e={}).promise=new Promise((function(t,i){e.resolve=t,e.reject=i}))),clearTimeout(e.timeout),e.latestArgs=n,e.timeout=setTimeout((function(){var i=e;e=void 0;try{i.resolve(t.apply(void 0,i.latestArgs))}catch(t){i.reject(t)}}),i),e.promise}}},116:(t,i,e)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.Environment=void 0;var n=e(438),s=e(765);i.Environment=function(t,i){this.pagePadding=10,this.minWidth=10,this.columns=t,this.rows=i,this.width=Math.min(window.innerWidth,document.documentElement.clientWidth)-2*this.pagePadding,this.height=Math.min(window.innerHeight,document.documentElement.clientHeight)-2*this.pagePadding,this.MaxBits=Math.floor(this.width/(2*this.minWidth+5)),this.columns=Math.max(Math.min(this.MaxBits,this.columns),2),document.getElementById("bits").value=this.columns.toString(),this.radius=Math.max(this.minWidth,Math.floor(Math.min((this.width-5*this.columns)/2/this.columns,(this.height-5*(this.rows+2))/2/(this.rows+2)))),this.spacing=2*this.radius+5;var e=this.columns*this.spacing-10,r=(this.width-e)/2+this.radius,a=(this.rows+2)*this.spacing-10,o=(this.height-a)/2;this.startX=r,this.startY=o,this.circles=new Array(this.rows),this.BinaryNumbers=new Array(this.rows),this.canvas=new n.CanvasStage(this),this.results=new s.BinaryNumber(this,this.rows+1);for(var h=0;h<this.rows;h++)this.BinaryNumbers[h]=new s.BinaryNumber(this,h)}},251:(t,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.Compute=void 0,i.Compute=function(t){for(var i=0,e=0;e<t.rows;e++)i+=t.BinaryNumbers[e].getDecimal();t.results.setDecimal(i)}},399:(t,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.VisualBit=void 0;var e=function(){function t(t,i,e,n,s){this.x=t,this.y=i,this.set=null!=s&&s,this.radius=e,this.left=this.x-e-1,this.top=this.y-e-1,this.right=this.x+e+1,this.bottom=this.y+e+1,this.env=n,this.fillColor="white",this.draw()}return t.prototype.switchBit=function(){this.set=!this.set,this.draw()},t.prototype.setBit=function(t){this.set=t,this.draw()},t.prototype.setOverflow=function(t){this.fillColor=t?"red":"white"},t.prototype.draw=function(){var t=this.env.canvas.context;t.clearRect(this.left,this.top,2*this.radius+2,2*this.radius+2),t.beginPath(),t.arc(this.x,this.y,this.radius,0,2*Math.PI),t.fillStyle=this.set?this.fillColor:"#0f0f0f",t.strokeStyle=this.set?"#95c299":"#330400",t.fill(),t.stroke(),t.closePath()},t}();i.VisualBit=e},607:(t,i,e)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.ChangeBitSize=void 0;var n,s=e(115),r=e(116),a=(0,s.debounce)(c,200),o=(0,s.debounce)((function(t){t=Math.min(n.MaxBits,t),t=Math.max(2,t),document.getElementById("bits").value=t.toString(),h=t,c()}),200),h=8,u=2;function l(){n=new r.Environment(h,u)}function c(){if(null!=document.getElementById("viewport")){document.getElementById("viewport").remove();var t=n.BinaryNumbers,i=n.results;l(),n.results.setDecimal(i.getDecimal());for(var e=0;e<t.length;e++){var s=t[e].getBinary();s=s.substring(s.length-h),n.BinaryNumbers[e].setDecimal(parseInt(s,2))}}}l(),window.addEventListener("resize",(function(t){a()})),i.ChangeBitSize=function(t){o(t)}}},i={};!function e(n){var s=i[n];if(void 0!==s)return s.exports;var r=i[n]={exports:{}};return t[n](r,r.exports,e),r.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,